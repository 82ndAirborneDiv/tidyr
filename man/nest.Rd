% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nest.R
\name{nest}
\alias{nest}
\title{Nest repeated values in a list-variable.}
\usage{
nest(data, ..., .key = "data")
}
\arguments{
\item{data}{A data frame.}

\item{...}{A selection of columns. These arguments are passed to
\code{\link[tidyselect:vars_select]{tidyselect::vars_select()}} and are treated specially for
selection:\preformatted{* Calls and complex expressions are evaluated in the context.
  You cannot refer to data columns in these expressions.

* Bare symbols are evaluated in the data but not the context.
  You can only refer to data columns with bare symbols.

* In addition, `c()` and the `:` operators are also evaluated
  in the data (this is an exception to the rule above). Select
  all variables between x and z with `x:z`, exclude y with
  `-y`. You can refer to columns but not to objects from the
  context. If you need to refer to contextual objects, you can
  unquote them with the tidy eval operator `!!`.
}

For instance, \code{col1:col3} creates a selection that refers to data
objects, while \code{seq(start, end)} creates a selection that refers
to contextual objects.}

\item{.key}{The name of the new column, as a string or symbol.

This argument is passed by expression and supports
\link[rlang:quasiquotation]{quasiquotation} (you can unquote strings
and symbols). The name is captured from the expression with
\code{\link[rlang:quo_name]{rlang::quo_name()}} (note that this kind of interface where
symbols do not represent actual objects is now discouraged in the
tidyverse; we support it here for backward compatibility).}
}
\description{
There are many possible ways one could choose to nest columns inside a
data frame. \code{nest()} creates a list of data frames containing all
the nested variables: this seems to be the most useful form in practice.
}
\examples{
library(dplyr)
as_tibble(iris) \%>\% nest(-Species)
as_tibble(chickwts) \%>\% nest(weight)

if (require("gapminder")) {
  gapminder \%>\%
    group_by(country, continent) \%>\%
    nest()

  gapminder \%>\%
    nest(-country, -continent)
}
}
\seealso{
\code{\link[=unnest]{unnest()}} for the inverse operation.
}
